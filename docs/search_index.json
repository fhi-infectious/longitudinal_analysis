[
["index.html", "Longitudinal Analysis Chapter 1 Syllabus", " Longitudinal Analysis Richard White 2018-04-12 Chapter 1 Syllabus Instructor: Richard White [richard.white@fhi.no] Time: 09:30 - 15:00, 18th September 2017 Location: Main auditorium, L8, Lindern Campus, Folkehelseinstittutet, Oslo Language: English Format and Procedures 09:00 - 10:00: Lecture 1 10:00 - 10:10: Break 10:10 - 11:10: Lecture 2 10:10 - 10:15: Break 11:15 - 11:45: Examples from FHI Description This course will provide a basic overview of general statistical methodology that can be useful in the areas of infectious diseases, environmental medicine, and labwork. By the end of this course, students will be able to identify appropriate statistical methods for a variety of circumstances. This course will not teach students how to implement these statistical methods, as there is not sufficient time. The aim of this course is to enable the student to identify which methods are required for their study, allowing the student to identify their needs for subsequent methods courses, self-learning, or external help. You should register for this course if you are one of the following: Have experience with applying statistical methods, but are sometimes confused or uncertain as to whether or not you have selected the correct method. Do not have experience with applying statistical methods, and would like to get an overview over which methods are applicable for your projects so that you can then undertake further studies in these areas. Lecture 1 Identifying continuous, categorical, count, and censored variables Identifying exposure and outcome variables Identifying when t-tests (paired and unpaired) should be used Identifying when non-parametric t-test equivalents should be used Identifying when ANOVA should be used Identifying when linear regression should be used Identifying the similarities between t-tests, ANOVA, and regression Identifying when logistic regression models should be used Identifying when Poisson/negative binomial and cox regression models should be used Identifying when chi-squared/fisher’s exact test should be used Lecture 2 Identifying when data does not have any dependencies (i.e. all observations are independent of each other) versus when data has complicated dependencies (i.e. longitudinal data, matched data, multiple cohorts) Identifying when mixed effects regression models should be used Identifying when conditional logistic regression models should be used (TBD) Understanding the different imputation methods used when lab data is below the limit of detection (LOD) (TBD) Understanding the best practices for data files and project folders Prerequisites To participate in this course it is recommended that you have some experience with either research or data. Additional information For the last 30 minutes of the course we will be going through examples of analyses performed at FHI and identifying which statistical methods are appropriate. If you would like your analysis to be featured/included in this section, please send an email to richard.white@fhi.no briefly describing your problem. "],
["reference.html", "Chapter 2 Reference", " Chapter 2 Reference "],
["variables.html", "Chapter 3 Variables 3.1 Showing that tscount::tsglm gets the same results as MASS::glmmPQL", " Chapter 3 Variables library(data.table) library(ggplot2) set.seed(4) AMPLITUDE &lt;- 1.5 SEASONAL_HORIZONTAL_SHIFT &lt;- 20 d &lt;- data.table(date=seq.Date( from=as.Date(&quot;2000-01-01&quot;), to=as.Date(&quot;2018-12-31&quot;), by=1)) d[,year:=as.numeric(format.Date(date,&quot;%G&quot;))] d[,week:=as.numeric(format.Date(date,&quot;%V&quot;))] d[,month:=as.numeric(format.Date(date,&quot;%m&quot;))] d[,yearMinus2000:=year-2000] d[,dayOfYear:=as.numeric(format.Date(date,&quot;%j&quot;))] d[,seasonalEffect:=sin(2*pi*(dayOfYear-SEASONAL_HORIZONTAL_SHIFT)/365)] d[,mu := exp(0.1 + yearMinus2000*0.1 + seasonalEffect*AMPLITUDE)] d[,y:=rpois(.N,mu)] Showing the true data q &lt;- ggplot(d,aes(x=date)) q &lt;- q + geom_point(mapping=aes(y=y)) q &lt;- q + geom_line(mapping=aes(y=mu),colour=&quot;red&quot;) q Investigating the data We take a quick look, but don’t see much q &lt;- ggplot(d,aes(x=date,y=y)) q &lt;- q + geom_point() q &lt;- q + stat_smooth(colour=&quot;red&quot;) q ## `geom_smooth()` using method = &#39;gam&#39; We then drill down into a few years, and see a clear seasonal trend q &lt;- ggplot(d[year %in% c(2005:2010)],aes(x=dayOfYear,y=y)) q &lt;- q + facet_wrap(~year) q &lt;- q + geom_point() q &lt;- q + stat_smooth(colour=&quot;red&quot;) q ## `geom_smooth()` using method = &#39;loess&#39; The Lomb-Scargle Periodogram shows a clear seasonality with a period of 365 days lomb::lsp(d$y,from=100,to=500,ofac=1,type=&quot;period&quot;) We then generate two new variables cos365 and sin365 and perform a simple poisson regression: d[,cos365:=cos(dayOfYear*2*pi/365)] d[,sin365:=sin(dayOfYear*2*pi/365)] fit0 &lt;- glm(y~yearMinus2000, data=d, family=poisson()) fit1 &lt;- glm(y~yearMinus2000+sin365 + cos365, data=d, family=poisson()) print(lmtest::lrtest(fit0, fit1)) ## Likelihood ratio test ## ## Model 1: y ~ yearMinus2000 ## Model 2: y ~ yearMinus2000 + sin365 + cos365 ## #Df LogLik Df Chisq Pr(&gt;Chisq) ## 1 2 -27287 ## 2 4 -12805 2 28963 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 print(summary(fit1)) ## ## Call: ## glm(formula = y ~ yearMinus2000 + sin365 + cos365, family = poisson(), ## data = d) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -3.7499 -0.9167 -0.1370 0.5955 3.2193 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.086654 0.014940 5.80 6.62e-09 *** ## yearMinus2000 0.100461 0.001049 95.75 &lt; 2e-16 *** ## sin365 1.428417 0.010434 136.90 &lt; 2e-16 *** ## cos365 -0.512912 0.008666 -59.19 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 46221.4 on 6939 degrees of freedom ## Residual deviance: 7259.2 on 6936 degrees of freedom ## AIC: 25619 ## ## Number of Fisher Scoring iterations: 5 We see a clear significant seasonal effect. We can then use trigonometry to back-calculate the cos365 and sin365 variables to amplitude and location of peak/troughs: b1 &lt;- 1.428417 # sin coefficient b2 &lt;- -0.512912 # cos coefficient amplitude &lt;- sqrt(b1^2 + b2^2) p &lt;- atan(b1/b2) * 365/2/pi if (p &gt; 0) { peak &lt;- p trough &lt;- p + 365/2 } else { peak &lt;- p + 365/2 trough &lt;- p + 365 } if (b1 &lt; 0) { g &lt;- peak peak &lt;- trough trough &lt;- g } print(sprintf(&quot;amplitude is estimated as %s, peak is estimated as %s, trough is estimated as %s&quot;,round(amplitude,2),round(peak),round(trough))) ## [1] &quot;amplitude is estimated as 1.52, peak is estimated as 111, trough is estimated as 294&quot; print(sprintf(&quot;true values are: amplitude: %s, peak: %s, trough: %s&quot;,round(AMPLITUDE,2),round(365/4+SEASONAL_HORIZONTAL_SHIFT),round(3*365/4+SEASONAL_HORIZONTAL_SHIFT))) ## [1] &quot;true values are: amplitude: 1.5, peak: 111, trough: 294&quot; We now investigate our residuals to determine if we have a good fit: d[,residuals:=residuals(fit1, type = &quot;response&quot;)] d[,predicted:=predict(fit1, type = &quot;response&quot;)] q &lt;- ggplot(d,aes(x=predicted,y=residuals)) q &lt;- q + geom_point() q &lt;- q + stat_smooth(colour=&quot;red&quot;) q ## `geom_smooth()` using method = &#39;gam&#39; # this is for AR pacf(d$residuals) # this is for MA acf(d$residuals) We see a clear significant seasonal effect. We can then use trigonometry to back-calculate the cos365 and sin365 variables to amplitude and location of peak/troughs: b1 &lt;- 0.1934 # sin coefficient b2 &lt;- 0.1018 # cos coefficient amplitude &lt;- sqrt(b1^2 + b2^2) p &lt;- atan(b1/b2) * 365/2/pi if (p &gt; 0) { peak &lt;- p trough &lt;- p + 365/2 } else { peak &lt;- p + 365/2 trough &lt;- p + 365 } if (b1 &lt; 0) { g &lt;- peak peak &lt;- trough trough &lt;- g } print(sprintf(&quot;amplitude is %s, peak is at %s, trough is at %s&quot;,round(amplitude,2),round(peak),round(trough))) ## [1] &quot;amplitude is 0.22, peak is at 63, trough is at 246&quot; 3.1 Showing that tscount::tsglm gets the same results as MASS::glmmPQL library(MASS) correlatedError &lt;- as.numeric(arima.sim(model=list(&quot;ar&quot;=c(-0.9)), n=1000, rand.gen = rnorm)) pacf(correlatedError) # this is for AR acf(correlatedError) # this is for MA d &lt;- data.frame(correlatedError) d$independentError &lt;- rnorm(nrow(d)) d$x &lt;- rnorm(nrow(d)) d$yCorrelated &lt;- 2*d$x+d$correlatedError d$yIndependent &lt;- 2*d$x+d$independentError d$ID &lt;- 1 d$time &lt;- 1:nrow(d) summary(lm(yIndependent~x,data=d)) ## ## Call: ## lm(formula = yIndependent ~ x, data = d) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.2196 -0.7132 0.0044 0.6760 2.9593 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.06795 0.03144 2.161 0.0309 * ## x 1.97958 0.03159 62.657 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.9943 on 998 degrees of freedom ## Multiple R-squared: 0.7973, Adjusted R-squared: 0.7971 ## F-statistic: 3926 on 1 and 998 DF, p-value: &lt; 2.2e-16 summary(fit &lt;- lm(yCorrelated~x,data=d)) ## ## Call: ## lm(formula = yCorrelated ~ x, data = d) ## ## Residuals: ## Min 1Q Median 3Q Max ## -7.1132 -1.6599 0.0492 1.6199 6.5856 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.0008572 0.0741155 -0.012 0.991 ## x 2.0247397 0.0744706 27.188 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.344 on 998 degrees of freedom ## Multiple R-squared: 0.4255, Adjusted R-squared: 0.4249 ## F-statistic: 739.2 on 1 and 998 DF, p-value: &lt; 2.2e-16 pacf(residuals(fit)) # this is for AR acf(residuals(fit)) # this is for MA # independent data, no correlation structure needed fit &lt;- MASS::glmmPQL(yIndependent ~ x, random = ~ 1 | ID, family = gaussian, data = d, correlation=nlme::corAR1()) ## iteration 1 summary(fit) ## Linear mixed-effects model fit by maximum likelihood ## Data: d ## AIC BIC logLik ## NA NA NA ## ## Random effects: ## Formula: ~1 | ID ## (Intercept) Residual ## StdDev: 3.157677e-05 0.9933179 ## ## Correlation Structure: AR(1) ## Formula: ~1 | ID ## Parameter estimate(s): ## Phi ## 0.05315098 ## Variance function: ## Structure: fixed weights ## Formula: ~invwt ## Fixed effects: yIndependent ~ x ## Value Std.Error DF t-value p-value ## (Intercept) 0.0679433 0.03315919 998 2.04900 0.0407 ## x 1.9792647 0.03162358 998 62.58825 0.0000 ## Correlation: ## (Intr) ## x 0.001 ## ## Standardized Within-Group Residuals: ## Min Q1 Med Q3 Max ## -3.241717414 -0.718010178 0.003911461 0.680810722 2.978619340 ## ## Number of Observations: 1000 ## Number of Groups: 1 pacf(residuals(fit, type = &quot;response&quot;)) # this is for AR acf(residuals(fit, type = &quot;response&quot;)) # this is for MA pacf(residuals(fit, type = &quot;normalized&quot;)) # this is for AR acf(residuals(fit, type = &quot;normalized&quot;)) # this is for MA # dependent data, needs correlation structure, no correlation structure fit &lt;- MASS::glmmPQL(yCorrelated ~ x, random = ~ 1 | ID, family = gaussian, data = d) ## iteration 1 summary(fit) ## Linear mixed-effects model fit by maximum likelihood ## Data: d ## AIC BIC logLik ## NA NA NA ## ## Random effects: ## Formula: ~1 | ID ## (Intercept) Residual ## StdDev: 7.66613e-05 2.341391 ## ## Variance function: ## Structure: fixed weights ## Formula: ~invwt ## Fixed effects: yCorrelated ~ x ## Value Std.Error DF t-value p-value ## (Intercept) -0.0008572 0.07411551 998 -0.011566 0.9908 ## x 2.0247397 0.07447061 998 27.188441 0.0000 ## Correlation: ## (Intr) ## x 0.001 ## ## Standardized Within-Group Residuals: ## Min Q1 Med Q3 Max ## -3.03803335 -0.70892801 0.02100393 0.69187212 2.81270067 ## ## Number of Observations: 1000 ## Number of Groups: 1 pacf(residuals(fit, type = &quot;response&quot;)) # this is for AR acf(residuals(fit, type = &quot;response&quot;)) # this is for MA pacf(residuals(fit, type = &quot;normalized&quot;)) # this is for AR acf(residuals(fit, type = &quot;normalized&quot;)) # this is for MA # dependent data, correct correlation structure fit &lt;- MASS::glmmPQL(yCorrelated ~ x, random = ~ 1 | ID, family = gaussian, data = d, correlation=nlme::corAR1()) ## iteration 1 ## iteration 2 summary(fit) ## Linear mixed-effects model fit by maximum likelihood ## Data: d ## AIC BIC logLik ## NA NA NA ## ## Random effects: ## Formula: ~1 | ID ## (Intercept) Residual ## StdDev: 1.698085e-05 2.341112 ## ## Correlation Structure: AR(1) ## Formula: ~1 | ID ## Parameter estimate(s): ## Phi ## -0.9035598 ## Variance function: ## Structure: fixed weights ## Formula: ~invwt ## Fixed effects: yCorrelated ~ x ## Value Std.Error DF t-value p-value ## (Intercept) 0.0010465 0.01668822 998 0.06271 0.95 ## x 2.0007666 0.02289286 998 87.39695 0.00 ## Correlation: ## (Intr) ## x 0.002 ## ## Standardized Within-Group Residuals: ## Min Q1 Med Q3 Max ## -3.05408286 -0.70634334 0.02403998 0.69306761 2.81549938 ## ## Number of Observations: 1000 ## Number of Groups: 1 pacf(residuals(fit, type = &quot;response&quot;)) # this is for AR acf(residuals(fit, type = &quot;response&quot;)) # this is for MA pacf(residuals(fit, type = &quot;normalized&quot;)) # this is for AR acf(residuals(fit, type = &quot;normalized&quot;)) # this is for MA library(MASS) bacteria$x &lt;- 1 fit &lt;- glmmPQL(as.numeric(y) ~ trt + I(week &gt; 2), random = ~ 1 | x, family = poisson, data = bacteria) ## iteration 1 acf(residuals(fit,type=&quot;normalized&quot;)) pacf(residuals(fit,type=&quot;normalized&quot;)) bacteria$x &lt;- 1 fit &lt;- glmmPQL(as.numeric(y) ~ trt + I(week &gt; 2), random = ~ 1 | x, family = poisson, data = bacteria, correlation=nlme::corAR1()) ## iteration 1 ## iteration 2 acf(residuals(fit,type=&quot;normalized&quot;)) pacf(residuals(fit,type=&quot;normalized&quot;)) fit &lt;- glmmPQL(as.numeric(y) ~ trt + I(week &gt; 2), random = ~ 1 | ID, family = poisson, data = bacteria) ## iteration 1 ## iteration 2 ## iteration 3 acf(residuals(fit,type=&quot;normalized&quot;)) pacf(residuals(fit,type=&quot;normalized&quot;)) fit &lt;- glmmPQL(as.numeric(y) ~ trt + I(week &gt; 2), random = ~ 1 | ID, family = poisson, data = bacteria, correlation=nlme::corAR1(form=~ 1 | ID)) ## iteration 1 ## iteration 2 ## iteration 3 ## iteration 4 acf(residuals(fit,type=&quot;normalized&quot;)) pacf(residuals(fit,type=&quot;normalized&quot;)) "],
["variables-1.html", "Chapter 4 Variables 4.1 Showing that tscount::tsglm gets the same results as MASS::glmmPQL", " Chapter 4 Variables library(data.table) library(ggplot2) set.seed(4) AMPLITUDE &lt;- 1.5 SEASONAL_HORIZONTAL_SHIFT &lt;- 20 d &lt;- data.table(date=seq.Date( from=as.Date(&quot;2000-01-01&quot;), to=as.Date(&quot;2018-12-31&quot;), by=1)) d[,year:=as.numeric(format.Date(date,&quot;%G&quot;))] d[,week:=as.numeric(format.Date(date,&quot;%V&quot;))] d[,month:=as.numeric(format.Date(date,&quot;%m&quot;))] d[,yearMinus2000:=year-2000] d[,dayOfSeries:=1:.N] d[,dayOfYear:=as.numeric(format.Date(date,&quot;%j&quot;))] d[,seasonalEffect:=sin(2*pi*(dayOfYear-SEASONAL_HORIZONTAL_SHIFT)/365)] d[,mu := exp(0.1 + yearMinus2000*0.1 + seasonalEffect*AMPLITUDE)] d[,y:=rpois(.N,mu)] d[,y:=round(as.numeric(arima.sim(model=list(&quot;ar&quot;=c(0.5)), rand.gen = rpois, n=nrow(d), lambda=mu)))] q &lt;- ggplot(d[year %in% c(2005:2010)],aes(x=dayOfYear,y=y)) q &lt;- q + facet_wrap(~year) q &lt;- q + geom_point() q &lt;- q + stat_smooth(colour=&quot;red&quot;) q ## `geom_smooth()` using method = &#39;loess&#39; The Lomb-Scargle Periodogram shows a clear seasonality with a period of 365 days lomb::lsp(d$y,from=50,to=500,ofac=1,type=&quot;period&quot;) d[,cos365:=cos(dayOfYear*2*pi/365)] d[,sin365:=sin(dayOfYear*2*pi/365)] fit0 &lt;- glm(y~yearMinus2000, data=d, family=poisson()) fit1 &lt;- glm(y~yearMinus2000+sin365 + cos365, data=d, family=poisson()) print(lmtest::lrtest(fit0, fit1)) ## Likelihood ratio test ## ## Model 1: y ~ yearMinus2000 ## Model 2: y ~ yearMinus2000 + sin365 + cos365 ## #Df LogLik Df Chisq Pr(&gt;Chisq) ## 1 2 -43124 ## 2 4 -14542 2 57163 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 print(summary(fit1)) ## ## Call: ## glm(formula = y ~ yearMinus2000 + sin365 + cos365, family = poisson(), ## data = d) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.6774 -0.6738 -0.0503 0.4920 3.5820 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.7981246 0.0105300 75.80 &lt;2e-16 *** ## yearMinus2000 0.0991480 0.0007416 133.70 &lt;2e-16 *** ## sin365 1.4074818 0.0073418 191.71 &lt;2e-16 *** ## cos365 -0.5390314 0.0061513 -87.63 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 81832.6 on 6939 degrees of freedom ## Residual deviance: 5217.8 on 6936 degrees of freedom ## AIC: 29093 ## ## Number of Fisher Scoring iterations: 4 d[,residuals:=residuals(fit1, type = &quot;response&quot;)] d[,predicted:=predict(fit1, type = &quot;response&quot;)] # this is for AR pacf(d$residuals) # this is for MA acf(d$residuals) This means our model is bad, we have autocorrelation. d[,ID:=1] # this is for MA fit &lt;- MASS::glmmPQL(y~yearMinus2000+sin365 + cos365, random = ~ 1 | ID, family = poisson, data = d, correlation=nlme::corAR1(form=~dayOfSeries|ID)) ## iteration 1 summary(fit) ## Linear mixed-effects model fit by maximum likelihood ## Data: d ## AIC BIC logLik ## NA NA NA ## ## Random effects: ## Formula: ~1 | ID ## (Intercept) Residual ## StdDev: 1.149069e-05 0.841689 ## ## Correlation Structure: AR(1) ## Formula: ~dayOfSeries | ID ## Parameter estimate(s): ## Phi ## 0.4926123 ## Variance function: ## Structure: fixed weights ## Formula: ~invwt ## Fixed effects: y ~ yearMinus2000 + sin365 + cos365 ## Value Std.Error DF t-value p-value ## (Intercept) 0.7980540 0.015203158 6936 52.49265 0 ## yearMinus2000 0.0991582 0.001070583 6936 92.62077 0 ## sin365 1.4074339 0.010596649 6936 132.81876 0 ## cos365 -0.5389807 0.008876447 6936 -60.72031 0 ## Correlation: ## (Intr) yM2000 sin365 ## yearMinus2000 -0.832 ## sin365 -0.409 0.000 ## cos365 0.186 0.000 -0.158 ## ## Standardized Within-Group Residuals: ## Min Q1 Med Q3 Max ## -2.89886753 -0.75775062 -0.05982255 0.60730690 6.49964494 ## ## Number of Observations: 6940 ## Number of Groups: 1 pacf(residuals(fit, type = &quot;normalized&quot;)) # this is for AR acf(residuals(fit, type = &quot;normalized&quot;)) # this is for MA b1 &lt;- 1.3936185 # sin coefficient b2 &lt;- -0.5233866 # cos coefficient amplitude &lt;- sqrt(b1^2 + b2^2) p &lt;- atan(b1/b2) * 365/2/pi if (p &gt; 0) { peak &lt;- p trough &lt;- p + 365/2 } else { peak &lt;- p + 365/2 trough &lt;- p + 365 } if (b1 &lt; 0) { g &lt;- peak peak &lt;- trough trough &lt;- g } print(sprintf(&quot;amplitude is estimated as %s, peak is estimated as %s, trough is estimated as %s&quot;,round(amplitude,2),round(peak),round(trough))) ## [1] &quot;amplitude is estimated as 1.49, peak is estimated as 112, trough is estimated as 295&quot; print(sprintf(&quot;true values are: amplitude: %s, peak: %s, trough: %s&quot;,round(AMPLITUDE,2),round(365/4+SEASONAL_HORIZONTAL_SHIFT),round(3*365/4+SEASONAL_HORIZONTAL_SHIFT))) ## [1] &quot;true values are: amplitude: 1.5, peak: 111, trough: 294&quot; 4.1 Showing that tscount::tsglm gets the same results as MASS::glmmPQL library(MASS) correlatedError &lt;- as.numeric(arima.sim(model=list(&quot;ar&quot;=c(-0.9)), n=1000, rand.gen = rnorm)) pacf(correlatedError) # this is for AR acf(correlatedError) # this is for MA d &lt;- data.frame(correlatedError) d$independentError &lt;- rnorm(nrow(d)) d$x &lt;- rnorm(nrow(d)) d$yCorrelated &lt;- 2*d$x+d$correlatedError d$yIndependent &lt;- 2*d$x+d$independentError d$ID &lt;- 1 d$time &lt;- 1:nrow(d) summary(lm(yIndependent~x,data=d)) ## ## Call: ## lm(formula = yIndependent ~ x, data = d) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.7055 -0.6919 0.0129 0.6823 2.8945 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.01133 0.03139 -0.361 0.718 ## x 2.06473 0.03103 66.541 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.9922 on 998 degrees of freedom ## Multiple R-squared: 0.8161, Adjusted R-squared: 0.8159 ## F-statistic: 4428 on 1 and 998 DF, p-value: &lt; 2.2e-16 summary(fit &lt;- lm(yCorrelated~x,data=d)) ## ## Call: ## lm(formula = yCorrelated ~ x, data = d) ## ## Residuals: ## Min 1Q Median 3Q Max ## -7.8825 -1.3737 -0.0576 1.4968 7.4766 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.03095 0.07241 -0.427 0.669 ## x 1.95682 0.07158 27.337 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.289 on 998 degrees of freedom ## Multiple R-squared: 0.4282, Adjusted R-squared: 0.4276 ## F-statistic: 747.3 on 1 and 998 DF, p-value: &lt; 2.2e-16 pacf(residuals(fit)) # this is for AR acf(residuals(fit)) # this is for MA # independent data, no correlation structure needed fit &lt;- MASS::glmmPQL(yIndependent ~ x, random = ~ 1 | ID, family = gaussian, data = d, correlation=nlme::corAR1()) ## iteration 1 ## iteration 2 summary(fit) ## Linear mixed-effects model fit by maximum likelihood ## Data: d ## AIC BIC logLik ## NA NA NA ## ## Random effects: ## Formula: ~1 | ID ## (Intercept) Residual ## StdDev: 3.140954e-05 0.9912063 ## ## Correlation Structure: AR(1) ## Formula: ~1 | ID ## Parameter estimate(s): ## Phi ## 0.04573347 ## Variance function: ## Structure: fixed weights ## Formula: ~invwt ## Fixed effects: yIndependent ~ x ## Value Std.Error DF t-value p-value ## (Intercept) -0.0112317 0.03285689 998 -0.34184 0.7325 ## x 2.0682689 0.03099327 998 66.73283 0.0000 ## Correlation: ## (Intr) ## x 0.028 ## ## Standardized Within-Group Residuals: ## Min Q1 Med Q3 Max ## -3.74008252 -0.69738448 0.01047609 0.68729125 2.92537677 ## ## Number of Observations: 1000 ## Number of Groups: 1 pacf(residuals(fit, type = &quot;response&quot;)) # this is for AR acf(residuals(fit, type = &quot;response&quot;)) # this is for MA pacf(residuals(fit, type = &quot;normalized&quot;)) # this is for AR acf(residuals(fit, type = &quot;normalized&quot;)) # this is for MA # dependent data, needs correlation structure, no correlation structure fit &lt;- MASS::glmmPQL(yCorrelated ~ x, random = ~ 1 | ID, family = gaussian, data = d) ## iteration 1 summary(fit) ## Linear mixed-effects model fit by maximum likelihood ## Data: d ## AIC BIC logLik ## NA NA NA ## ## Random effects: ## Formula: ~1 | ID ## (Intercept) Residual ## StdDev: 7.486629e-05 2.286563 ## ## Variance function: ## Structure: fixed weights ## Formula: ~invwt ## Fixed effects: yCorrelated ~ x ## Value Std.Error DF t-value p-value ## (Intercept) -0.0309491 0.07241167 998 -0.427404 0.6692 ## x 1.9568162 0.07158024 998 27.337380 0.0000 ## Correlation: ## (Intr) ## x 0.03 ## ## Standardized Within-Group Residuals: ## Min Q1 Med Q3 Max ## -3.44731225 -0.60078114 -0.02520784 0.65459886 3.26978586 ## ## Number of Observations: 1000 ## Number of Groups: 1 pacf(residuals(fit, type = &quot;response&quot;)) # this is for AR acf(residuals(fit, type = &quot;response&quot;)) # this is for MA pacf(residuals(fit, type = &quot;normalized&quot;)) # this is for AR acf(residuals(fit, type = &quot;normalized&quot;)) # this is for MA # dependent data, correct correlation structure fit &lt;- MASS::glmmPQL(yCorrelated ~ x, random = ~ 1 | ID, family = gaussian, data = d, correlation=nlme::corAR1()) ## iteration 1 ## iteration 2 summary(fit) ## Linear mixed-effects model fit by maximum likelihood ## Data: d ## AIC BIC logLik ## NA NA NA ## ## Random effects: ## Formula: ~1 | ID ## (Intercept) Residual ## StdDev: 1.643326e-05 2.282467 ## ## Correlation Structure: AR(1) ## Formula: ~1 | ID ## Parameter estimate(s): ## Phi ## -0.9031247 ## Variance function: ## Structure: fixed weights ## Formula: ~invwt ## Fixed effects: yCorrelated ~ x ## Value Std.Error DF t-value p-value ## (Intercept) -0.0296893 0.01632325 998 -1.81883 0.0692 ## x 2.0072905 0.02255834 998 88.98217 0.0000 ## Correlation: ## (Intr) ## x 0.042 ## ## Standardized Within-Group Residuals: ## Min Q1 Med Q3 Max ## -3.46470223 -0.60212874 -0.01867443 0.66118043 3.29397505 ## ## Number of Observations: 1000 ## Number of Groups: 1 pacf(residuals(fit, type = &quot;response&quot;)) # this is for AR acf(residuals(fit, type = &quot;response&quot;)) # this is for MA pacf(residuals(fit, type = &quot;normalized&quot;)) # this is for AR acf(residuals(fit, type = &quot;normalized&quot;)) # this is for MA library(MASS) bacteria$x &lt;- 1 fit &lt;- glmmPQL(as.numeric(y) ~ trt + I(week &gt; 2), random = ~ 1 | x, family = poisson, data = bacteria) ## iteration 1 acf(residuals(fit,type=&quot;normalized&quot;)) pacf(residuals(fit,type=&quot;normalized&quot;)) bacteria$x &lt;- 1 fit &lt;- glmmPQL(as.numeric(y) ~ trt + I(week &gt; 2), random = ~ 1 | x, family = poisson, data = bacteria, correlation=nlme::corAR1()) ## iteration 1 ## iteration 2 acf(residuals(fit,type=&quot;normalized&quot;)) pacf(residuals(fit,type=&quot;normalized&quot;)) fit &lt;- glmmPQL(as.numeric(y) ~ trt + I(week &gt; 2), random = ~ 1 | ID, family = poisson, data = bacteria) ## iteration 1 ## iteration 2 ## iteration 3 acf(residuals(fit,type=&quot;normalized&quot;)) pacf(residuals(fit,type=&quot;normalized&quot;)) fit &lt;- glmmPQL(as.numeric(y) ~ trt + I(week &gt; 2), random = ~ 1 | ID, family = poisson, data = bacteria, correlation=nlme::corAR1(form=~ 1 | ID)) ## iteration 1 ## iteration 2 ## iteration 3 ## iteration 4 acf(residuals(fit,type=&quot;normalized&quot;)) pacf(residuals(fit,type=&quot;normalized&quot;)) "],
["variables-2.html", "Chapter 5 Variables", " Chapter 5 Variables library(data.table) library(lme4) ## Loading required package: Matrix ## Loading required package: methods set.seed(4) fylkeIntercepts &lt;- data.table(fylke=1:20,fylkeIntercepts=rnorm(20)) d &lt;- data.table(fylke=rep(1:20,each=100)) d &lt;- merge(d,fylkeIntercepts,by=&quot;fylke&quot;) d[,mainIntercept:=3] d[,x:=runif(.N)] d[,mu := exp(mainIntercept + fylkeIntercepts + 3*x)] d[,y:=rpois(.N,mu)] summary(fit &lt;- lme4::glmer(y~x + (1|fylke),data=d,family=poisson())) ## Generalized linear mixed model fit by maximum likelihood (Laplace ## Approximation) [glmerMod] ## Family: poisson ( log ) ## Formula: y ~ x + (1 | fylke) ## Data: d ## ## AIC BIC logLik deviance df.resid ## 15508.5 15525.3 -7751.3 15502.5 1997 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -3.1132 -0.6422 -0.0260 0.6556 3.6029 ## ## Random effects: ## Groups Name Variance Std.Dev. ## fylke (Intercept) 0.6167 0.7853 ## Number of obs: 2000, groups: fylke, 20 ## ## Fixed effects: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 3.378858 0.175660 19.2 &lt;2e-16 *** ## x 2.990811 0.005991 499.2 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## x -0.024 "],
["variables-3.html", "Chapter 6 Variables", " Chapter 6 Variables library(data.table) library(ggplot2) set.seed(4) AMPLITUDE &lt;- 1.5 SEASONAL_HORIZONTAL_SHIFT &lt;- 20 fylkeIntercepts &lt;- data.table(fylke=1:20,fylkeIntercepts=rnorm(20)) d &lt;- data.table(date=seq.Date( from=as.Date(&quot;2010-01-01&quot;), to=as.Date(&quot;2015-12-31&quot;), by=1)) d[,year:=as.numeric(format.Date(date,&quot;%G&quot;))] d[,week:=as.numeric(format.Date(date,&quot;%V&quot;))] d[,month:=as.numeric(format.Date(date,&quot;%m&quot;))] temp &lt;- vector(&quot;list&quot;,length=20) for(i in 1:20){ temp[[i]] &lt;- copy(d) temp[[i]][,fylke:=i] } d &lt;- rbindlist(temp) d[,yearMinus2000:=year-2000] d[,dayOfSeries:=1:.N] d[,dayOfYear:=as.numeric(format.Date(date,&quot;%j&quot;))] d[,seasonalEffect:=sin(2*pi*(dayOfYear-SEASONAL_HORIZONTAL_SHIFT)/365)] d[,mu := exp(0.1 + yearMinus2000*0.1 + seasonalEffect*AMPLITUDE)] d[,y:=rpois(.N,mu)] #d[,y:=round(as.numeric(arima.sim(model=list(&quot;ar&quot;=c(0.5)), rand.gen = rpois, n=nrow(d), lambda=mu)))] We then drill down into a few years, and see a clear seasonal trend q &lt;- ggplot(d[fylke==1],aes(x=dayOfYear,y=y)) q &lt;- q + facet_wrap(~year) q &lt;- q + geom_point() q &lt;- q + stat_smooth(colour=&quot;red&quot;) q ## `geom_smooth()` using method = &#39;loess&#39; ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : span too small. fewer data values than degrees of freedom. ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at 0.99 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 1.01 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 0 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 1.0201 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : span too small. ## fewer data values than degrees of freedom. ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used ## at 0.99 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 1.01 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal ## condition number 0 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other ## near singularities as well. 1.0201 The Lomb-Scargle Periodogram shows a clear seasonality with a period of 365 days lomb::lsp(d$y,from=100,to=500,ofac=1,type=&quot;period&quot;) d[,cos365:=cos(dayOfYear*2*pi/365)] d[,sin365:=sin(dayOfYear*2*pi/365)] fit &lt;- MASS::glmmPQL(y~yearMinus2000+sin365 + cos365, random = ~ 1 | fylke, family = poisson, data = d, correlation=nlme::corAR1(form=~dayOfSeries|fylke)) ## iteration 1 summary(fit) ## Linear mixed-effects model fit by maximum likelihood ## Data: d ## AIC BIC logLik ## NA NA NA ## ## Random effects: ## Formula: ~1 | fylke ## (Intercept) Residual ## StdDev: 1.708256e-05 0.9976713 ## ## Correlation Structure: AR(1) ## Formula: ~dayOfSeries | fylke ## Parameter estimate(s): ## Phi ## 0.002841665 ## Variance function: ## Structure: fixed weights ## Formula: ~invwt ## Fixed effects: y ~ yearMinus2000 + sin365 + cos365 ## Value Std.Error DF t-value p-value ## (Intercept) 0.1122528 0.014529606 43797 7.7258 0 ## yearMinus2000 0.0989047 0.001112632 43797 88.8926 0 ## sin365 1.4095094 0.003705852 43797 380.3469 0 ## cos365 -0.5109372 0.003092449 43797 -165.2209 0 ## Correlation: ## (Intr) yM2000 sin365 ## yearMinus2000 -0.979 ## sin365 -0.150 0.000 ## cos365 0.065 -0.001 -0.151 ## ## Standardized Within-Group Residuals: ## Min Q1 Med Q3 Max ## -3.1968230 -0.8238741 -0.0750183 0.6340046 5.8245241 ## ## Number of Observations: 43820 ## Number of Groups: 20 pacf(residuals(fit, type = &quot;normalized&quot;)) # this is for AR acf(residuals(fit, type = &quot;normalized&quot;)) # this is for MA b1 &lt;- 1.4007640 # sin coefficient b2 &lt;- -0.5234863 # cos coefficient amplitude &lt;- sqrt(b1^2 + b2^2) p &lt;- atan(b1/b2) * 365/2/pi if (p &gt; 0) { peak &lt;- p trough &lt;- p + 365/2 } else { peak &lt;- p + 365/2 trough &lt;- p + 365 } if (b1 &lt; 0) { g &lt;- peak peak &lt;- trough trough &lt;- g } print(sprintf(&quot;amplitude is estimated as %s, peak is estimated as %s, trough is estimated as %s&quot;,round(amplitude,2),round(peak),round(trough))) ## [1] &quot;amplitude is estimated as 1.5, peak is estimated as 112, trough is estimated as 295&quot; print(sprintf(&quot;true values are: amplitude: %s, peak: %s, trough: %s&quot;,round(AMPLITUDE,2),round(365/4+SEASONAL_HORIZONTAL_SHIFT),round(3*365/4+SEASONAL_HORIZONTAL_SHIFT))) ## [1] &quot;true values are: amplitude: 1.5, peak: 111, trough: 294&quot; "],
["variables-4.html", "Chapter 7 Variables", " Chapter 7 Variables library(data.table) library(ggplot2) set.seed(4) AMPLITUDE &lt;- 1.5 SEASONAL_HORIZONTAL_SHIFT &lt;- 20 fylkeIntercepts &lt;- data.table(fylke=1:20,fylkeIntercepts=rnorm(20)) d &lt;- data.table(date=seq.Date( from=as.Date(&quot;2010-01-01&quot;), to=as.Date(&quot;2015-12-31&quot;), by=1)) d[,year:=as.numeric(format.Date(date,&quot;%G&quot;))] d[,week:=as.numeric(format.Date(date,&quot;%V&quot;))] d[,month:=as.numeric(format.Date(date,&quot;%m&quot;))] temp &lt;- vector(&quot;list&quot;,length=20) for(i in 1:20){ temp[[i]] &lt;- copy(d) temp[[i]][,fylke:=i] } d &lt;- rbindlist(temp) d[,yearMinus2000:=year-2000] d[,dayOfSeries:=1:.N] d[,dayOfYear:=as.numeric(format.Date(date,&quot;%j&quot;))] d[,seasonalEffect:=sin(2*pi*(dayOfYear-SEASONAL_HORIZONTAL_SHIFT)/365)] d[,mu := exp(0.1 + yearMinus2000*0.1 + seasonalEffect*AMPLITUDE)] d[,y:=rpois(.N,mu)] d[,y:=round(as.numeric(arima.sim(model=list(&quot;ar&quot;=c(0.5)), rand.gen = rpois, n=nrow(d), lambda=mu)))] We then drill down into a few years, and see a clear seasonal trend q &lt;- ggplot(d[fylke==1],aes(x=dayOfYear,y=y)) q &lt;- q + facet_wrap(~year) q &lt;- q + geom_point() q &lt;- q + stat_smooth(colour=&quot;red&quot;) q ## `geom_smooth()` using method = &#39;loess&#39; ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : span too small. fewer data values than degrees of freedom. ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at 0.99 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 1.01 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 0 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 1.0201 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : span too small. ## fewer data values than degrees of freedom. ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used ## at 0.99 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 1.01 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal ## condition number 0 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other ## near singularities as well. 1.0201 The Lomb-Scargle Periodogram shows a clear seasonality with a period of 365 days lomb::lsp(d$y,from=100,to=500,ofac=1,type=&quot;period&quot;) d[,cos365:=cos(dayOfYear*2*pi/365)] d[,sin365:=sin(dayOfYear*2*pi/365)] fit &lt;- MASS::glmmPQL(y~yearMinus2000+sin365 + cos365, random = ~ 1 | fylke, family = poisson, data = d, correlation=nlme::corAR1(form=~dayOfSeries|fylke)) ## iteration 1 summary(fit) ## Linear mixed-effects model fit by maximum likelihood ## Data: d ## AIC BIC logLik ## NA NA NA ## ## Random effects: ## Formula: ~1 | fylke ## (Intercept) Residual ## StdDev: 0.003916838 0.822866 ## ## Correlation Structure: AR(1) ## Formula: ~dayOfSeries | fylke ## Parameter estimate(s): ## Phi ## 0.4771948 ## Variance function: ## Structure: fixed weights ## Formula: ~invwt ## Fixed effects: y ~ yearMinus2000 + sin365 + cos365 ## Value Std.Error DF t-value p-value ## (Intercept) 0.8181967 0.014201621 43797 57.6129 0 ## yearMinus2000 0.0982444 0.001085637 43797 90.4947 0 ## sin365 1.4007640 0.003607254 43797 388.3187 0 ## cos365 -0.5234863 0.003020395 43797 -173.3171 0 ## Correlation: ## (Intr) yM2000 sin365 ## yearMinus2000 -0.977 ## sin365 -0.149 0.001 ## cos365 0.067 -0.001 -0.153 ## ## Standardized Within-Group Residuals: ## Min Q1 Med Q3 Max ## -3.40197340 -0.70762882 -0.06465241 0.62676531 5.47900204 ## ## Number of Observations: 43820 ## Number of Groups: 20 pacf(residuals(fit, type = &quot;normalized&quot;)) # this is for AR acf(residuals(fit, type = &quot;normalized&quot;)) # this is for MA b1 &lt;- 1.4007640 # sin coefficient b2 &lt;- -0.5234863 # cos coefficient amplitude &lt;- sqrt(b1^2 + b2^2) p &lt;- atan(b1/b2) * 365/2/pi if (p &gt; 0) { peak &lt;- p trough &lt;- p + 365/2 } else { peak &lt;- p + 365/2 trough &lt;- p + 365 } if (b1 &lt; 0) { g &lt;- peak peak &lt;- trough trough &lt;- g } print(sprintf(&quot;amplitude is estimated as %s, peak is estimated as %s, trough is estimated as %s&quot;,round(amplitude,2),round(peak),round(trough))) ## [1] &quot;amplitude is estimated as 1.5, peak is estimated as 112, trough is estimated as 295&quot; print(sprintf(&quot;true values are: amplitude: %s, peak: %s, trough: %s&quot;,round(AMPLITUDE,2),round(365/4+SEASONAL_HORIZONTAL_SHIFT),round(3*365/4+SEASONAL_HORIZONTAL_SHIFT))) ## [1] &quot;true values are: amplitude: 1.5, peak: 111, trough: 294&quot; "]
]
